---
title: "Philosophical Response Generator"
format: 
  html:
    theme: minty
    code-fold: true
    code-tools: true
    code-line-numbers: true
    page-layout: full
jupyter: python3
---

```{python}
#| label: imports
#| output: false

import os
import time
import json
import requests
import logging
import pickle
from dataclasses import dataclass
from typing import List, Optional
from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class TherapeuticResponse:
    """Adapted response structure for philosophical context"""
    text: str
    timestamp: float
    error: bool = False
    processing_time: float = 0.0
    error_details: str = ""
    timeout: bool = False
    conceptual_depth: float = 0.0
    philosophical_schools: List[str] = None
    refinement_suggestions: List[str] = None

    #| label: ollama-client
#| output: false

class OllamaClient:
    """Modified client for theoretical discussions"""
    def __init__(self, model_name: str = "llama2", base_url: str = "http://localhost:11434"):
        self.model_name = model_name
        self.base_url = base_url
        self.max_retries = 3
        self.request_timeout = 180

    def _parse_json_safe(self, text: str):
        """Simplified JSON parsing"""
        try:
            return json.loads(text.strip())
        except:
            return {"response": text.strip()}

    def generate(self, prompt: str) -> tuple[str, bool]:
        """Streamlined generation method"""
        for attempt in range(self.max_retries):
            try:
                response = requests.post(
                    f"{self.base_url}/api/generate",
                    json={
                        "model": self.model_name,
                        "prompt": prompt[:3000],
                        "stream": False,
                        "options": {"temperature": 0.7}
                    },
                    timeout=self.request_timeout
                )
                data = self._parse_json_safe(response.text)
                return data.get("response", ""), False
            except Exception as e:
                logger.warning(f"Attempt {attempt+1} failed: {e}")
                time.sleep(1)
        return f"Error: Failed after {self.max_retries} attempts", True

        #| label: agent
#| output: false

class BaseAgent:
    """Simplified agent framework"""
    def __init__(self, client: OllamaClient):
        self.client = client
        self.retry_count = 2
        self.max_wait = 120
        
    def generate_response(self, prompt: str) -> TherapeuticResponse:
        """Efficient generation method"""
        start_time = time.time()
        
        if not prompt.strip():
            return TherapeuticResponse(
                text="Error: Empty prompt",
                timestamp=start_time,
                error=True,
                processing_time=0.0
            )
            
        for _ in range(self.retry_count):
            try:
                text, error = self.client.generate(prompt)
                return TherapeuticResponse(
                    text=text,
                    timestamp=start_time,
                    error=error,
                    processing_time=time.time() - start_time
                )
            except Exception as e:
                error_msg = str(e)
                
        return TherapeuticResponse(
            text=error_msg,
            timestamp=start_time,
            error=True,
            processing_time=time.time() - start_time
        )

        #| label: demo
#| output: true
#| code-line-numbers: true

# Initialize components
client = OllamaClient(model_name="llama2")
agent = BaseAgent(client)

# Generate and save response
prompt = "What are therapeutic responses to Foucault's concept of power-knowledge?"
response = agent.generate_response(prompt)

# Save and display results
with open("philosophical_response.pkl", "wb") as f:
    pickle.dump(response, f)

with open("philosophical_response.pkl", "rb") as file:
    loaded_response = pickle.load(file)

print("=== Philosophical Analysis ===")
print(f"Processing Time: {loaded_response.processing_time:.2f}s")
print("Response Content:\n")
print(loaded_response.text)